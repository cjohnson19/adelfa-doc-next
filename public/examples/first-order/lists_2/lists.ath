Specification "lists.lf".

Theorem Lemma1 : forall L1 L2 L3 L4 D1 D2, {D1 : rev_acc L1 L2 L3} => {D2 : rev_acc L1 L2 L4} =>
  exists D3, {D3 : eq_list L3 L4}.

  induction on 1. intros. case H1.
  % rev_acc_cons case.
  case H2.
  apply IH to H7 H12.
  exists D1.
  search.
  % rev_acc_nil case.
  case H2.
  exists refl_list L4.
  search.

Theorem Lemma2 : forall a B AB ba ba2 D1 D2 D3, {D1 : rev_acc a B AB} =>
  {D2 : rev_acc AB nil ba} => {D3 : rev_acc B a ba2} =>
  exists D4, {D4 : eq_list ba ba2}.

  induction on 1. intros. case H1.
  % rev_acc_cons case.
  assert {ba2 : list}.
  assert exists D4, {D4 : rev_acc (cons N B) L1 ba2}.
  exists rev_acc_cons B L1 ba2 N D3. search.
  apply IH to H8 H2 H10.
  case H11.
  exists refl_list ba2.
  search.
  % rev_acc_nil case.
  apply Lemma1 to H2 H3 with L1 = AB, L2 = nil, L3 = ba, L4 = ba2, D1 = D2, D2 = D3.
  exists D1.
  search.

Theorem Lemma3 : forall L1 L2 L3 D1, {D1 : rev_acc L1 L2 L3} => {L3 : list}.
  induction on 1. intros. case H1.
  search.
  search.

Theorem Lemma4 : forall L1 L2, {L1 : list} => {L2 : list} => exists L3 D, {D : rev_acc L1 L2 L3}.
  induction on 1. intros. case H1.
  % rev_acc_cons case.
  assert {(cons n L2):list}.
  apply IH to H4 H5.
  exists L3.
  exists rev_acc_cons l L2 L3 n D.
  search.
  % rev_acc_nil case.
  exists L2.
  exists rev_acc_nil L2.
  search.

Theorem rev_rev : forall L1 L2 D1, {D1 : rev L1 L2} => exists D2, {D2 : rev L2 L1}.
  intros. case H1.
  apply Lemma3 to H4 with L1 = L1, L2 = nil, L3 = L2, D1 = D.
  assert {nil : list}.
  apply Lemma4 to H5 H6 with L1 = L2, L2 = nil.
  assert exists D2, {D2 : rev_acc nil L1 L1}. exists rev_acc_nil L1. search.
  apply Lemma2 to H4 H7 H8 with a = L1, B = nil, AB = L2, ba = L3, ba2 = L1, D1 = D, D2 = D1, D3 = D2.
  case H9.
  exists rev_nil_acc L2 L1 D1.
  search.
