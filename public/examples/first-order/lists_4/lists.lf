nat : type.
z : nat.
s : {x:nat} nat.

list : type.
nil : list.
cons : {n:nat} {l:list} list.

eq_list : list -> list -> type.
refl_list : {L:list} eq_list L L.

islist : list -> type.
islist_nil : islist nil.
islist_cons : {X:nat} {L:list} {D:islist L} islist (cons X L).

rev_acc : list -> list -> list -> type.
rev_acc_nil : {L:list} rev_acc nil L L.
rev_acc_cons : {L1:list} {L2:list} {L3:list} {N:nat} {D:rev_acc L1 (cons N L2) L3}
  rev_acc (cons N L1) L2 L3.

rev : list -> list -> type.
rev_nil_acc : {L1:list} {L2:list} {D:rev_acc L1 nil L2} rev L1 L2.
